{"version":3,"sources":["components/Winner/Winner.component.jsx","redux/timer/timer.types.js","redux/timer/timer.action.js","redux/user/user.types.js","redux/user/user.action.js","components/CountDownTimer/CountDownTimer.component.jsx","components/Timer/Timer.component.jsx","components/UserListItem/UserListItem.component.jsx","components/UserList/UserList.component.jsx","pages/MainPage/MainPage.component.jsx","scripts/EventHandler.jsx","App.js","serviceWorker.js","redux/timer/timer.reducer.js","redux/user/user.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Winner","winner","useSelector","state","user","console","log","className","name","timerTypes","SET_TIME","setCountDownSecond","time","type","payload","userTypes","SET_USER_LIST","SET_WINNER","CLEAR_WINNER","ADD_USER","DELETE_USER","setUserList","userList","React","memo","countDownSecond","timer","dispatch","useDispatch","useEffect","timerStartTime","Date","now","countDownTimer","setInterval","remain","currentTime","difference","parseInt","calculateTimeLeft","clearInterval","document","querySelector","classList","add","toISOString","substr","Timer","useState","second","setSecond","submitHandler","value","onChange","e","target","htmlFor","onClick","UserListItem","deleteSelectedUser","selectedUser","deleteUser","UserList","addUserHandler","newUserName","prompt","newUser","id","length","addUser","Axios","get","then","response","data","catch","error","map","key","MainPage","EventHandler","this","WinnerSecion","WinnerSectionToggle","addEventListener","toggle","App","Boolean","window","location","hostname","match","initialState","countToZeroFlag","timerReducer","action","userReducer","filter","winnerId","Math","floor","random","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","logger","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.658afc2a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Winner.style.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Winner() {\n  const winner = useSelector((state) => state.user.winner);\n\n  console.log(\"winner rendered\");\n\n  return (\n    <div className=\"Winner\">\n      <div className=\"Winner-detail\">\n        <h3>得獎者</h3>\n        <h1>{winner.name}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Winner;\n","const timerTypes = {\n  SET_TIME: \"SET_TIME\",\n};\n\nexport default timerTypes;\n","import timerTypes from \"./timer.types\";\n\nexport const setCountDownSecond = (time) => ({\n  type: timerTypes.SET_TIME,\n  payload: time,\n});\n","const userTypes = {\n  SET_USER_LIST: \"SET_USER_LIST\",\n  SET_WINNER: \"SET_WINNER\",\n  CLEAR_WINNER: \" CLEAR_WINNER\",\n  ADD_USER: \"ADD_USER\",\n  DELETE_USER: \"DELETE_USER\",\n};\n\nexport default userTypes;\n","import userTypes from \"./user.types\";\nimport Axios from \"axios\";\n\nexport const fetchUserListFromApi = () => {\n  return function (dispatch) {\n    Axios.get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        dispatch(setUserList(response.data));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\nexport const setUserList = (userList) => {\n  return {\n    type: userTypes.SET_USER_LIST,\n    payload: userList,\n  };\n};\n\nexport const setWinner = () => {\n  return {\n    type: userTypes.SET_WINNER,\n  };\n};\n\nexport const clearWinner = () => {\n  return {\n    type: userTypes.CLEAR_WINNER,\n  };\n};\n\nexport const addUser = (newUser) => {\n  return {\n    type: userTypes.ADD_USER,\n    payload: newUser,\n  };\n};\n\nexport const deleteUser = (selectedUser) => {\n  return {\n    type: userTypes.DELETE_USER,\n    payload: selectedUser,\n  };\n};\n","import React from \"react\";\nimport \"./CountDownTimer.style.scss\";\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setCountDownSecond } from \"../../redux/timer/timer.action\";\n\nimport { setWinner } from \"../../redux/user/user.action\";\n\nfunction CountDownTimer() {\n  const countDownSecond = useSelector((state) => state.timer.countDownSecond);\n  const dispatch = useDispatch();\n\n  const calculateTimeLeft = (timerStartTime) => {\n    const currentTime = Date.now(); //當下時間\n    const difference = parseInt((currentTime - timerStartTime) / 1000);\n    const remain = countDownSecond - difference;\n    return remain;\n  };\n\n  useEffect(() => {\n    if (countDownSecond === 0) return; //輸入秒數才開始倒數\n\n    const timerStartTime = Date.now(); //Timer啟動時的時間(計算剩餘時間需要)\n\n    // Timer啟動\n    const countDownTimer = setInterval(() => {\n      const remain = calculateTimeLeft(timerStartTime); //計算剩餘時間\n      dispatch(setCountDownSecond(remain)); //將剩餘時間更新至state\n\n      // 如果歸零則停止\n      if (remain <= 0) {\n        clearInterval(countDownTimer);\n        console.log(\"SUCCESS\");\n\n        dispatch(setWinner());\n\n        const WinnerSecion = document.querySelector(\".Winner\");\n        WinnerSecion.classList.add(\"Winner-show\");\n      }\n    }, 1000);\n\n    return () => {\n      // 清除 Timer 準備重置\n      clearInterval(countDownTimer);\n    };\n  }, [countDownSecond]);\n\n  return (\n    <div className=\"CountDownTimer\">\n      <h1>{new Date(countDownSecond * 1000).toISOString().substr(14, 5)}</h1>\n    </div>\n  );\n}\nexport default React.memo(CountDownTimer);\n","import React from \"react\";\nimport \"./Timer.style.scss\";\nimport { useState } from \"react\";\n\nimport CountDownTimer from \"../CountDownTimer/CountDownTimer.component\";\nimport { useDispatch } from \"react-redux\";\n\nimport { setCountDownSecond } from \"../../redux/timer/timer.action\";\nimport { clearWinner } from \"../../redux/user/user.action\";\n\nfunction Timer() {\n  const [second, setSecond] = useState(0);\n  const dispatch = useDispatch();\n\n  function submitHandler() {\n    dispatch(setCountDownSecond(second));\n    dispatch(clearWinner());\n  }\n\n  return (\n    <div className=\"Timer\">\n      <h1>抽獎時間</h1>\n\n      <div className=\"timer-input\">\n        <input\n          type=\"text\"\n          value={second}\n          name=\"second\"\n          onChange={(e) => setSecond(e.target.value)}\n        />\n        <label htmlFor=\"\">秒</label>\n        <button onClick={() => submitHandler()}>開始倒數</button>\n      </div>\n\n      <CountDownTimer />\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from \"react\";\nimport \"./UserListItem.style.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteUser } from \"../../redux/user/user.action\";\n\nfunction UserListItem({ user }) {\n  const dispatch = useDispatch();\n\n  function deleteSelectedUser(selectedUser) {\n    // console.log(selectedUser);\n\n    dispatch(deleteUser(selectedUser));\n  }\n\n  return (\n    <div className=\"UserListItem\">\n      <div className=\"UserListItem-icon\">\n        <i className=\"far fa-user-circle\"></i>\n      </div>\n      <div className=\"UserListItem-name\">{user.name}</div>\n      <div\n        onClick={() => deleteSelectedUser(user)}\n        className=\"UserListItem-delete\"\n      >\n        <i className=\"fas fa-trash\"></i>\n      </div>\n    </div>\n  );\n}\n\nexport default UserListItem;\n","import React from \"react\";\nimport \"./UserList.style.scss\";\nimport { useEffect } from \"react\";\n\nimport UserListItem from \"../UserListItem/UserListItem.component\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  fetchUserListFromApi,\n  addUser,\n  setUserList,\n} from \"../../redux/user/user.action\";\n\nfunction UserList() {\n  const userList = useSelector((state) => state.user.userList);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUserListFromApi());\n  }, []);\n\n  // useEffect(() => {\n  //   dispatch(setUserList());\n  // }, []);\n\n  function addUserHandler() {\n    console.log(\"addUser\");\n    let newUserName = prompt(\"輸入姓名\", \"王大錘\");\n    let newUser = { id: newUserName + userList.length, name: newUserName };\n\n    dispatch(addUser(newUser));\n  }\n\n  return (\n    <div\n      className=\"UserList\n\"\n    >\n      <div className=\"UserList-Title\">\n        <h1>參與抽獎名單</h1>\n        <button onClick={() => addUserHandler()}>新增名單</button>\n      </div>\n      <div className=\"UserList-List\">\n        {userList.length\n          ? userList.map((user) => {\n              return <UserListItem user={user} key={user.id} />;\n            })\n          : null}\n      </div>\n    </div>\n  );\n}\n\nexport default UserList;\n","import React from \"react\";\nimport \"./MainPage.style.scss\";\n\nimport Timer from \"../../components/Timer/Timer.component\";\nimport UserList from \"../../components/UserList/UserList.component\";\n\nfunction MainPage() {\n  return (\n    <div className=\"MainPage\">\n      <div className=\"MainPage-container\">\n        <Timer />\n        <UserList />\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n","export class EventHandler {\n  constructor() {\n    // 取得html物件\n    this.WinnerSecion = document.querySelector(\".Winner\");\n    // 執行eventHandler\n    this.WinnerSectionToggle();\n  }\n\n  WinnerSectionToggle() {\n    if (this.WinnerSecion !== null) {\n      this.WinnerSecion.addEventListener(\"click\", () => {\n        this.WinnerSecion.classList.toggle(\"Winner-show\");\n      });\n    }\n  }\n}\n","import React, { useEffect } from \"react\";\nimport \"./styles/base/overall.scss\";\n\nimport Winner from \"./components/Winner/Winner.component\";\nimport MainPage from \"./pages/MainPage/MainPage.component\";\n\nimport { EventHandler } from \"./scripts/EventHandler\";\n\nfunction App() {\n  useEffect(() => {\n    let ev = new EventHandler();\n  }, []);\n  console.log(\"App rendered\");\n\n  return (\n    <div className=\"App\">\n      <MainPage />\n\n      <Winner />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import timerTypes from \"./timer.types\";\n\nconst initialState = {\n  countDownSecond: 0,\n  countToZeroFlag: false,\n};\n\nconst timerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case timerTypes.SET_TIME:\n      return {\n        ...state,\n        countDownSecond: action.payload,\n        countToZeroFlag: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default timerReducer;\n","import userTypes from \"./user.types\";\n\nconst initialState = {\n  userList: [],\n  winner: {},\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case userTypes.SET_USER_LIST: {\n      console.log(action);\n\n      return { ...state, userList: action.payload };\n    }\n\n    case userTypes.ADD_USER: {\n      return { ...state, userList: [action.payload, ...state.userList] };\n    }\n\n    case userTypes.DELETE_USER: {\n      return {\n        ...state,\n        userList: state.userList.filter(\n          (user) => user.id !== action.payload.id\n        ),\n      };\n    }\n\n    case userTypes.SET_WINNER: {\n      const winnerId = Math.floor(Math.random() * state.userList.length);\n\n      return { ...state, winner: state.userList[winnerId] };\n    }\n\n    case userTypes.CLEAR_WINNER: {\n      return { ...state, winner: {} };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { combineReducers } from \"redux\";\nimport timerReducer from \"./timer/timer.reducer\";\nimport userReducer from \"./user/user.reducer\";\n\nexport default combineReducers({\n  timer: timerReducer,\n  user: userReducer,\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middleware = [logger, thunk];\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}